name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint_typecheck:
    name: Lint + Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Typecheck
        run: pnpm typecheck

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint_typecheck
    env:
      # Minimal env needed for server imports during Next build
      NODE_ENV: production
      NEXTAUTH_URL: https://example.com
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DB: ${{ secrets.MONGODB_DB }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEXT_PUBLIC_APP_URL: https://example.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

  e2e:
    name: E2E (optional)
    runs-on: ubuntu-latest
    needs: build
    if: ${{ vars.ENABLE_E2E == 'true' }}
    env:
      NODE_ENV: test
      NEXTAUTH_URL: http://localhost:3000
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGODB_DB: ${{ secrets.MONGODB_DB }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: pnpm build

      - name: Start app (background)
        run: |
          pnpm start &
          npx wait-on http://localhost:3000

      - name: Run Playwright tests (if present)
        if: ${{ hashFiles('playwright.config.*') != '' }}
        run: |
          npx playwright install --with-deps
          npx playwright test --reporter=dot

      - name: Smoke check (fallback)
        if: ${{ hashFiles('playwright.config.*') == '' }}
        run: |
          curl -sv http://localhost:3000/ | head -n 20

